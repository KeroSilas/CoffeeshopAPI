// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(CoffeeContext))]
    [Migration("20231127132556_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Models.Entities.Addition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("Amount")
                        .HasColumnType("int")
                        .HasColumnName("amount");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("money")
                        .HasColumnName("price");

                    b.HasKey("Id")
                        .HasName("PK__Addition__3214EC078AF931A3");

                    b.ToTable("Additions");
                });

            modelBuilder.Entity("Models.Entities.BrewingMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("money")
                        .HasColumnName("price");

                    b.HasKey("Id")
                        .HasName("PK__Brewing___3214EC0753A8E88B");

                    b.ToTable("Brewing_methods", (string)null);
                });

            modelBuilder.Entity("Models.Entities.CoffeeBean", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("money")
                        .HasColumnName("price");

                    b.HasKey("Id")
                        .HasName("PK__Coffee_b__3214EC077DFE8327");

                    b.ToTable("Coffee_beans", (string)null);
                });

            modelBuilder.Entity("Models.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("CommentTime")
                        .HasColumnType("datetime")
                        .HasColumnName("commentTime");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<Guid>("PredefinedCoffeeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("predefinedCoffeeId");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("userId");

                    b.HasKey("Id")
                        .HasName("PK__Comments__3214EC07E1C848FB");

                    b.HasIndex("PredefinedCoffeeId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Models.Entities.Cookie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<Guid?>("PredefinedCoffeeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("predefinedCoffeeId");

                    b.Property<decimal>("Price")
                        .HasColumnType("money")
                        .HasColumnName("price");

                    b.HasKey("Id")
                        .HasName("PK__Cookies__3214EC07FB0FC4F6");

                    b.HasIndex("PredefinedCoffeeId");

                    b.ToTable("Cookies");
                });

            modelBuilder.Entity("Models.Entities.CustomCoffee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("BeanId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("beanId");

                    b.Property<Guid>("BrewingId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("brewingId");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("money")
                        .HasColumnName("totalPrice");

                    b.HasKey("Id")
                        .HasName("PK__Custom_c__3214EC07865FB1CC");

                    b.HasIndex("BeanId");

                    b.HasIndex("BrewingId");

                    b.ToTable("Custom_coffees", (string)null);
                });

            modelBuilder.Entity("Models.Entities.Favorite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("AdditionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("additionId");

                    b.Property<Guid>("CustomCoffeeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("customCoffeeId");

                    b.HasKey("Id")
                        .HasName("PK__Favorite__3214EC07567C5829");

                    b.HasIndex("AdditionId");

                    b.HasIndex("CustomCoffeeId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("Models.Entities.Like", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("LikeTime")
                        .HasColumnType("datetime")
                        .HasColumnName("likeTime");

                    b.Property<Guid>("PredefinedCoffeeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("predefinedCoffeeId");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("userId");

                    b.HasKey("Id")
                        .HasName("PK__Likes__3214EC071C73E7A9");

                    b.HasIndex("PredefinedCoffeeId");

                    b.HasIndex("UserId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("Models.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("locationId");

                    b.Property<DateTime>("OrderTime")
                        .HasColumnType("datetime")
                        .HasColumnName("orderTime");

                    b.Property<DateTime>("PickupTime")
                        .HasColumnType("datetime")
                        .HasColumnName("pickupTime");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("money")
                        .HasColumnName("totalPrice");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("userId");

                    b.HasKey("Id")
                        .HasName("PK__Orders__3214EC0725A16FD7");

                    b.HasIndex("LocationId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Models.Entities.OrderDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("CookieId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("cookieId");

                    b.Property<Guid?>("CustomCoffeeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("customCoffeeId");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("orderId");

                    b.Property<Guid?>("PredefinedCoffeeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("predefinedCoffeeId");

                    b.Property<decimal>("Price")
                        .HasColumnType("money")
                        .HasColumnName("price");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("Id")
                        .HasName("PK__Order_de__3214EC0768D2A478");

                    b.HasIndex("CookieId");

                    b.HasIndex("CustomCoffeeId");

                    b.HasIndex("OrderId");

                    b.HasIndex("PredefinedCoffeeId");

                    b.ToTable("Order_details", (string)null);
                });

            modelBuilder.Entity("Models.Entities.PickupLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("address");

                    b.Property<int>("Phone")
                        .HasColumnType("int")
                        .HasColumnName("phone");

                    b.Property<string>("ShopName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("shopName");

                    b.HasKey("Id")
                        .HasName("PK__Pickup_l__3214EC0720E6FDBC");

                    b.ToTable("Pickup_locations", (string)null);
                });

            modelBuilder.Entity("Models.Entities.PredefinedCoffee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("money")
                        .HasColumnName("price");

                    b.HasKey("Id")
                        .HasName("PK__Predefin__3214EC0734C7AEE4");

                    b.ToTable("Predefined_coffees", (string)null);
                });

            modelBuilder.Entity("Models.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("firstName");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit")
                        .HasColumnName("isAdmin");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varbinary(256)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("PK__Users__3214EC07DEDEE4A0");

                    b.HasIndex(new[] { "Email" }, "UQ__Users__AB6E61645FBED559")
                        .IsUnique();

                    b.HasIndex(new[] { "Username" }, "UQ__Users__F3DBC5726B993205")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Models.Entities.Comment", b =>
                {
                    b.HasOne("Models.Entities.PredefinedCoffee", "PredefinedCoffee")
                        .WithMany("Comments")
                        .HasForeignKey("PredefinedCoffeeId")
                        .IsRequired()
                        .HasConstraintName("FK__Comments__predef__693CA210");

                    b.HasOne("Models.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Comments__userId__68487DD7");

                    b.Navigation("PredefinedCoffee");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Entities.Cookie", b =>
                {
                    b.HasOne("Models.Entities.PredefinedCoffee", "PredefinedCoffee")
                        .WithMany("Cookies")
                        .HasForeignKey("PredefinedCoffeeId")
                        .HasConstraintName("FK__Cookies__predefi__71D1E811");

                    b.Navigation("PredefinedCoffee");
                });

            modelBuilder.Entity("Models.Entities.CustomCoffee", b =>
                {
                    b.HasOne("Models.Entities.CoffeeBean", "Bean")
                        .WithMany("CustomCoffees")
                        .HasForeignKey("BeanId")
                        .IsRequired()
                        .HasConstraintName("FK__Custom_co__beanI__5BE2A6F2");

                    b.HasOne("Models.Entities.BrewingMethod", "Brewing")
                        .WithMany("CustomCoffees")
                        .HasForeignKey("BrewingId")
                        .IsRequired()
                        .HasConstraintName("FK__Custom_co__brewi__5CD6CB2B");

                    b.Navigation("Bean");

                    b.Navigation("Brewing");
                });

            modelBuilder.Entity("Models.Entities.Favorite", b =>
                {
                    b.HasOne("Models.Entities.Addition", "Addition")
                        .WithMany("Favorites")
                        .HasForeignKey("AdditionId")
                        .IsRequired()
                        .HasConstraintName("FK__Favorites__addit__7D439ABD");

                    b.HasOne("Models.Entities.CustomCoffee", "CustomCoffee")
                        .WithMany("Favorites")
                        .HasForeignKey("CustomCoffeeId")
                        .IsRequired()
                        .HasConstraintName("FK__Favorites__custo__7C4F7684");

                    b.Navigation("Addition");

                    b.Navigation("CustomCoffee");
                });

            modelBuilder.Entity("Models.Entities.Like", b =>
                {
                    b.HasOne("Models.Entities.PredefinedCoffee", "PredefinedCoffee")
                        .WithMany("Likes")
                        .HasForeignKey("PredefinedCoffeeId")
                        .IsRequired()
                        .HasConstraintName("FK__Likes__predefine__6477ECF3");

                    b.HasOne("Models.Entities.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Likes__userId__6383C8BA");

                    b.Navigation("PredefinedCoffee");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Entities.Order", b =>
                {
                    b.HasOne("Models.Entities.PickupLocation", "Location")
                        .WithMany("Orders")
                        .HasForeignKey("LocationId")
                        .IsRequired()
                        .HasConstraintName("FK__Orders__location__6E01572D");

                    b.HasOne("Models.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Orders__userId__6D0D32F4");

                    b.Navigation("Location");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Entities.OrderDetail", b =>
                {
                    b.HasOne("Models.Entities.Cookie", "Cookie")
                        .WithMany("OrderDetails")
                        .HasForeignKey("CookieId")
                        .HasConstraintName("FK__Order_det__cooki__787EE5A0");

                    b.HasOne("Models.Entities.CustomCoffee", "CustomCoffee")
                        .WithMany("OrderDetails")
                        .HasForeignKey("CustomCoffeeId")
                        .HasConstraintName("FK__Order_det__custo__778AC167");

                    b.HasOne("Models.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK__Order_det__order__75A278F5");

                    b.HasOne("Models.Entities.PredefinedCoffee", "PredefinedCoffee")
                        .WithMany("OrderDetails")
                        .HasForeignKey("PredefinedCoffeeId")
                        .HasConstraintName("FK__Order_det__prede__76969D2E");

                    b.Navigation("Cookie");

                    b.Navigation("CustomCoffee");

                    b.Navigation("Order");

                    b.Navigation("PredefinedCoffee");
                });

            modelBuilder.Entity("Models.Entities.Addition", b =>
                {
                    b.Navigation("Favorites");
                });

            modelBuilder.Entity("Models.Entities.BrewingMethod", b =>
                {
                    b.Navigation("CustomCoffees");
                });

            modelBuilder.Entity("Models.Entities.CoffeeBean", b =>
                {
                    b.Navigation("CustomCoffees");
                });

            modelBuilder.Entity("Models.Entities.Cookie", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Models.Entities.CustomCoffee", b =>
                {
                    b.Navigation("Favorites");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Models.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Models.Entities.PickupLocation", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Models.Entities.PredefinedCoffee", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Cookies");

                    b.Navigation("Likes");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Models.Entities.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
